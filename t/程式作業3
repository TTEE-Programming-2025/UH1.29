#include <stdio.h>
#include <stdlib.h>
#ifdef _WIN32
#include <conio.h> // For getch() and clrscr() (Windows)
#else
#include <ncurses.h> // For getch() and clear() (Linux/macOS)
#endif
#include <time.h>   // For random number generation
#include <string.h> // For strcmp()

#define ROWS 9
#define COLS 9
#define PASSWORD "2025"

// Function prototypes
void display_personal_screen();
int verify_password();
void display_menu();
void display_seats(char seats[ROWS][COLS]);
void arrange_seats(char seats[ROWS][COLS]);
void choose_seats(char seats[ROWS][COLS]);
void exit_program();
void clear_screen();

int main() {
    char seats[ROWS][COLS];
    int choice;

    srand(time(0)); // Seed the random number generator

    display_personal_screen();

    if (!verify_password()) {
        printf("Authentication failed. Exiting...\n");
        return 1;
    }

    // Initialize seats
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            seats[i][j] = '-';
        }
    }

    // Randomly reserve 10 seats
    int reserved_count = 0;
    while (reserved_count < 10) {
        int row = rand() % ROWS;
        int col = rand() % COLS;
        if (seats[row][col] == '-') {
            seats[row][col] = '*';
            reserved_count++;
        }
    }

    do {
        clear_screen();
        display_menu();
        printf("Enter your choice: ");
        choice = getch();

        switch (choice) {
            case 'a':
                clear_screen();
                display_seats(seats);
                printf("\nPress any key to return to the menu...");
                getch();
                break;
            case 'b':
                clear_screen();
                arrange_seats(seats);
                break;
            case 'c':
                clear_screen();
                choose_seats(seats);
                break;
            case 'd':
                clear_screen();
                exit_program();
                break;
            default:
                printf("\nInvalid choice. Please try again.\n");
                break;
        }
    } while (choice != 'd');

    return 0;
}

#include <stdio.h>
#include <string.h>

#define PASSWORD "1234" // 定義密碼為常數

void display_personal_screen() {
    // 顯示個人化畫面，滿足至少 20 行的要求
    printf("*****************************************\n");
    printf("*                                       *\n");
    printf("*      Welcome to the H1.29     *\n");
    printf("*              Hello                 *\n");
    printf("*                                       *\n");
    printf("*     Developed by: Your Name Here      *\n");
    printf("*                                       *\n");
    printf("*     1. 嗨          *\n");
    printf("*     2. 你好                    *\n");
    printf("*     3. 興趣:打球                 *\n");
    printf("*     4. 休閒:打遊戲                *\n");
    printf("*     5. 年齡19                           *\n");
    printf("*                                       *\n");
    printf("*          *\n");
    printf("*                                       *\n");
    printf("*            *\n");
    printf("*                        *\n");
    printf("*                                       *\n");
    printf("*****************************************\n\n");
}

int verify_password() {
    char input[10]; // 提供足夠空間避免溢位
    int tries = 0;

    while (tries < 3) {
        printf("Enter the 4-digit password: ");
        scanf("%9s", input); // 安全讀取最多9個字元，避免緩衝區溢位

        if (strcmp(input, PASSWORD) == 0) {
            printf("Password correct. Welcome!\n\n");
            return 1; // 成功
        } else {
            tries++;
            if (tries < 3)
                printf("Incorrect password. You have %d attempt(s) left.\n", 3 - tries);
        }
    }

    printf("Too many incorrect attempts. Access denied.\n\n");
    return 0; // 失敗
}


void display_menu() {
    printf("----[Booking System]----\n");
    printf("a. Available seats\n");
    printf("b. Arrange for you\n");
    printf("c. Choose by yourself\n");
    printf("d. Exit\n");
    printf("------------------------\n");
}

void display_seats(char seats[ROWS][COLS]) {
    printf("\n     Seat Layout\n");
    printf("   ");
    for (int i = 0; i < COLS; i++) {
        printf("%2d", i + 1); // 更整齊地顯示欄編號
    }
    printf("\n");

    for (int i = 0; i < ROWS; i++) {
        printf("R%-2d", ROWS - i); // 顯示列編號 (R9, R8, ..., R1)
        for (int j = 0; j < COLS; j++) {
            printf(" %c", seats[i][j]); // 顯示座位狀態，預期為 'O' 或 'X'
        }
        printf("\n");
    }
    printf("\nLegend: O = Available, X = Booked\n\n");
}

extern void display_seats(char seats[ROWS][COLS]); // 假設 display_seats 已定義

void arrange_seats(char seats[ROWS][COLS]) {
    int num_seats;

    printf("Enter the number of seats needed (1-4): ");
    scanf("%d", &num_seats);

    if (num_seats < 1 || num_seats > 4) {
        printf("❌ Invalid number of seats.\n");
        return;
    }

    int found = 0;

    // === 處理 1~4 個連續座位 ===
    for (int i = 0; i < ROWS && !found; i++) {
        for (int j = 0; j <= COLS - num_seats; j++) {
            int available = 1;
            for (int k = 0; k < num_seats; k++) {
                if (seats[i][j + k] != '-') {
                    available = 0;
                    break;
                }
            }
            if (available) {
                // 標記候選座位為 '@'
                for (int k = 0; k < num_seats; k++) {
                    seats[i][j + k] = '@';
                }
                found = 1;
                break;
            }
        }
    }

    if (found) {
        display_seats(seats);
        char choice;
        printf("✅ Suggested seats marked as '@'\n");
        printf("Are you satisfied with the arrangement? (y/n): ");
        scanf(" %c", &choice);

        if (choice == 'y' || choice == 'Y') {
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    if (seats[i][j] == '@') {
                        seats[i][j] = '*'; // 確認訂位
                    }
                }
            }
            printf("🎉 Seats successfully booked!\n\n");
        } else {
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    if (seats[i][j] == '@') {
                        seats[i][j] = '-'; // 取消建議
                    }
                }
            }
            printf("ℹ️  Arrangement cancelled.\n\n");
        }
    } else {
        printf("❌ No suitable seats found.\n\n");
    }
}

    if (found) {
        display_seats(seats);
        char choice;
        printf("\nSatisfied with the arrangement? (y/n): ");
        scanf(" %c", &choice);

        if (choice == 'y') {
            // Update seats to '*'
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    if (seats[i][j] == '@') {
                        seats[i][j] = '*';
                    }
                }
            }
            printf("Seats booked.\n");
        } else {
            // Clear '@' marks
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    if (seats[i][j] == '@') {
                        seats[i][j] = '-';
                    }
                }
            }
            printf("Arrangement cancelled.\n");
        }
    } else {
        printf("No suitable seats found.\n");
    }
}

void choose_seats(char seats[ROWS][COLS]) {
    int row, col;
    char input[5];

    printf("Enter seat choices (e.g., 1-2, one at a time, enter 'done' when finished):\n");

    while (1) {
        printf("Enter seat (or 'done'): ");
        scanf("%4s", input);

        if (strcmp(input, "done") == 0) {
            break;
        }

        if (sscanf(input, "%d-%d", &row, &col) != 2 || row < 1 || row > ROWS || col < 1 || col > COLS) {
            printf("Invalid input format or seat number.\n");
            continue;
        }

        row = ROWS - row;
        col--;

        if (seats[row][col] != '-') {
            printf("Seat already taken.\n");
        } else {
            seats[row][col] = '@'; // Mark as chosen
        }
    }

    display_seats(seats);

    printf("\nConfirm seat selection? (Press any key to continue)\n");
    getch();

    // Update chosen seats to '*'
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (seats[i][j] == '@') {
                seats[i][j] = '*';
            }
        }
    }
}

void exit_program() {
    char choice;
    printf("Continue? (y/n): ");
    scanf(" %c", &choice);

    if (choice == 'y') {
        // The main loop will handle going back to the menu
    } else if (choice == 'n') {
        printf("Exiting program.\n");
        // exit(0); // Not strictly necessary, but good practice
    } else {
        printf("Invalid input. Returning to menu.\n");
    }
}

void clear_screen() {
#ifdef _WIN32
    system("cls");   // For Windows
#else
    system("clear"); // For Linux/macOS
#endif
}
